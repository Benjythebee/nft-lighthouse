generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  account_uuid                                         String                 @id @db.Uuid
  created_at                                           DateTime               @default(now()) @db.Timestamp(6)
  last_sign_in_at                                      DateTime               @default(now()) @db.Timestamp(6)
  referral_account_uuid                                String?                @db.Uuid
  username                                             String
  email                                                String
  credits                                              BigInt                 @default(0)
  personal_quote                                       String                 @default("")
  account                                              account?               @relation("accountToaccount", fields: [referral_account_uuid], references: [account_uuid], onDelete: NoAction, onUpdate: NoAction)
  other_account                                        account[]              @relation("accountToaccount")
  account_activity_log                                 account_activity_log[]
  account_progress                                     account_progress[]
  activity_watchlist                                   activity_watchlist[]
  asset                                                asset[]
  badge                                                badge[]
  character                                            character[]
  mech                                                 mech[]
  mission                                              mission[]
  mission_mod                                          mission_mod[]
  notification_notification_account_uuidToaccount      notification[]         @relation("notification_account_uuidToaccount")
  notification_notification_from_account_uuidToaccount notification[]         @relation("notification_from_account_uuidToaccount")
  payment                                              payment[]
}

model account_activity_log {
  account_activity_log_id BigInt     @id @default(autoincrement())
  account_uuid            String     @db.Uuid
  character_id            BigInt?
  activity_ref_key        String
  activity_data           Json       @default("{}")
  activity_at             DateTime   @default(now()) @db.Timestamptz(6)
  account                 account    @relation(fields: [account_uuid], references: [account_uuid], onDelete: NoAction, onUpdate: NoAction)
  character               character? @relation(fields: [character_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction)
}

model account_progress {
  account_progress_id Int       @id @default(autoincrement())
  account_uuid        String?   @db.Uuid
  progress_ref_key    String
  done                Boolean?  @default(false)
  done_at             DateTime? @db.Timestamptz(6)
  account             account?  @relation(fields: [account_uuid], references: [account_uuid], onDelete: NoAction, onUpdate: NoAction)

  @@unique([account_uuid, progress_ref_key])
}

model activity_watchlist {
  activity_watchlist_id BigInt    @id @default(autoincrement())
  account_uuid          String    @db.Uuid
  character_id          BigInt
  location_ref_key      String
  watchlist_type        String
  watchlist_key         String
  notes                 String?
  created_at            DateTime  @default(now()) @db.Timestamptz(6)
  account               account   @relation(fields: [account_uuid], references: [account_uuid], onDelete: NoAction, onUpdate: NoAction)
  character             character @relation(fields: [character_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction)
}

model asset {
  asset_id           BigInt     @id @default(autoincrement())
  account_uuid       String     @db.Uuid
  character_id       BigInt?
  asset_ref_category String
  asset_ref_key      String
  count              BigInt     @default(1)
  contract_id        BigInt?
  token_id           BigInt?
  metadata_cache     Json       @default("{}")
  account            account    @relation(fields: [account_uuid], references: [account_uuid], onDelete: NoAction, onUpdate: NoAction)
  character          character? @relation(fields: [character_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction)
  contract           contract?  @relation(fields: [contract_id], references: [contract_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([account_uuid, asset_ref_category, asset_ref_key])
  @@unique([contract_id, token_id])
}

model badge {
  badge_id      Int      @id @default(autoincrement())
  account_uuid  String?  @db.Uuid
  badge_ref_key String
  received_at   DateTime @default(now()) @db.Timestamptz(6)
  account       account? @relation(fields: [account_uuid], references: [account_uuid], onDelete: NoAction, onUpdate: NoAction)

  @@unique([account_uuid, badge_ref_key])
}

model character {
  character_id         BigInt                 @id @default(autoincrement())
  character_type       character_type
  account_uuid         String                 @db.Uuid
  location_ref_key     String?
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  status               character_status       @default(active)
  jump_codes           BigInt                 @default(0)
  name                 String
  class                character_class
  health               Int                    @default(0)
  max_health           Int                    @default(0)
  bytes                Int                    @default(0)
  bandwidth            Int                    @default(0)
  speed                Int                    @default(0)
  power                Int                    @default(0)
  latency              Int                    @default(0)
  security             Int                    @default(0)
  stability            Int                    @default(0)
  body                 Int                    @default(0)
  mind                 Int                    @default(0)
  soul                 Int                    @default(0)
  contract_id          BigInt?
  token_id             BigInt?
  account_activity_log account_activity_log[]
  activity_watchlist   activity_watchlist[]
  asset                asset[]
  account              account                @relation(fields: [account_uuid], references: [account_uuid], onDelete: NoAction, onUpdate: NoAction)
  contract             contract?              @relation(fields: [contract_id], references: [contract_id], onDelete: NoAction, onUpdate: NoAction)
  character_transit    character_transit[]
  item                 item[]
  mission              mission[]

  @@unique([contract_id, token_id])
}

model character_transit {
  character_transit_id  BigInt         @id @default(autoincrement())
  character_id          BigInt
  transit_status        transit_status @default(ongoing)
  from_location_ref_key String
  to_location_ref_key   String
  jump_codes_cost       BigInt         @default(1)
  jump_codes_paid       BigInt         @default(0)
  started_at            DateTime       @default(now()) @db.Timestamptz(6)
  end_at                DateTime       @db.Timestamptz(6)
  updated_at            DateTime?      @db.Timestamptz(6)
  character             character      @relation(fields: [character_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction)
}

model contract {
  contract_id     BigInt            @id @default(autoincrement())
  blockchain      blockchain
  address         Bytes
  key             String
  asset           asset[]
  character       character[]
  mech            mech[]
  payment         payment[]
  token_ownership token_ownership[]

  @@unique([blockchain, address])
}

model item {
  item_id           BigInt        @id @default(autoincrement())
  character_id      BigInt
  item_ref_category String
  item_ref_key      String
  count             BigInt        @default(1)
  character         character     @relation(fields: [character_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction)
  mission_mod       mission_mod[]

  @@unique([character_id, item_ref_category, item_ref_key])
}

model mech {
  mech_id             BigInt    @id @default(autoincrement())
  account_uuid        String    @db.Uuid
  last_updated        DateTime  @default(now()) @db.Timestamp(6)
  name                String
  endurance           Int       @default(0)
  power               Int       @default(0)
  speed               Int       @default(0)
  weight              Int       @default(0)
  height              Int       @default(0)
  special_ability_key String
  disassembled        Boolean   @default(false)
  contract_id         BigInt?
  token_id            Int?
  metadata_cache      Json      @default("{}")
  account             account   @relation(fields: [account_uuid], references: [account_uuid], onDelete: NoAction, onUpdate: NoAction)
  contract            contract? @relation(fields: [contract_id], references: [contract_id], onDelete: NoAction, onUpdate: NoAction)
}

model mission {
  mission_id             BigInt                @id @default(autoincrement())
  account_uuid           String                @db.Uuid
  character_id           BigInt
  created_at             DateTime              @default(now()) @db.Timestamptz(6)
  expire_at              DateTime?             @db.Timestamptz(6)
  started_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  mission_engine_version Int                   @default(1)
  mission_ref_key        String
  mission_data           Json                  @default("{}")
  mission_status         mission_status?       @default(issued)
  bytes_reward           BigInt                @default(0)
  credits_reward         BigInt                @default(0)
  jump_codes_reward      BigInt                @default(0)
  claimed                Boolean               @default(false)
  account                account               @relation(fields: [account_uuid], references: [account_uuid], onDelete: NoAction, onUpdate: NoAction)
  character              character             @relation(fields: [character_id], references: [character_id], onDelete: NoAction, onUpdate: NoAction)
  mission_item_reward    mission_item_reward[]
  mission_task           mission_task[]
}

model mission_item_reward {
  mission_item_reward_id BigInt        @id @default(autoincrement())
  mission_id             BigInt
  mission_task_id        BigInt?
  item_ref_key           String
  count                  BigInt        @default(1)
  claimed                Boolean       @default(false)
  mission                mission       @relation(fields: [mission_id], references: [mission_id], onDelete: NoAction, onUpdate: NoAction)
  mission_task           mission_task? @relation(fields: [mission_task_id], references: [mission_task_id], onDelete: NoAction, onUpdate: NoAction)
}

model mission_mod {
  mission_mod_id  BigInt       @id @default(autoincrement())
  mission_task_id BigInt
  account_uuid    String       @db.Uuid
  item_id         BigInt
  count_used      BigInt       @default(1)
  used_at         DateTime     @default(now()) @db.Timestamptz(6)
  cooldown_at     DateTime     @default(now()) @db.Timestamptz(6)
  effect_data     Json         @default("{}")
  account         account      @relation(fields: [account_uuid], references: [account_uuid], onDelete: NoAction, onUpdate: NoAction)
  item            item         @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction)
  mission_task    mission_task @relation(fields: [mission_task_id], references: [mission_task_id], onDelete: NoAction, onUpdate: NoAction)
}

model mission_task {
  mission_task_id     BigInt                @id @default(autoincrement())
  mission_id          BigInt
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  expire_at           DateTime?             @db.Timestamptz(6)
  started_at          DateTime?             @db.Timestamptz(6)
  updated_at          DateTime?             @db.Timestamptz(6)
  end_at              DateTime?             @db.Timestamptz(6)
  location_ref_key    String
  task_ref_key        String
  task_data           Json                  @default("{}")
  task_status         mission_status?       @default(issued)
  action_ref_key      String
  difficulty_target   Decimal               @db.Decimal
  player_roll         Decimal               @db.Decimal
  bytes_reward        BigInt                @default(0)
  credits_reward      BigInt                @default(0)
  jump_codes_reward   BigInt                @default(0)
  claimed             Boolean               @default(false)
  mission_item_reward mission_item_reward[]
  mission_mod         mission_mod[]
  mission             mission               @relation(fields: [mission_id], references: [mission_id], onDelete: NoAction, onUpdate: NoAction)
}

model notification {
  notification_id                                 BigInt    @id @default(autoincrement())
  account_uuid                                    String    @db.Uuid
  from_account_uuid                               String?   @db.Uuid
  notification_ref_category                       String
  notification_ref_key                            String
  notification_data                               Json      @default("{}")
  sent_at                                         DateTime  @default(now()) @db.Timestamptz(6)
  opened_at                                       DateTime? @db.Timestamptz(6)
  account_notification_account_uuidToaccount      account   @relation("notification_account_uuidToaccount", fields: [account_uuid], references: [account_uuid], onDelete: NoAction, onUpdate: NoAction)
  account_notification_from_account_uuidToaccount account?  @relation("notification_from_account_uuidToaccount", fields: [from_account_uuid], references: [account_uuid], onDelete: NoAction, onUpdate: NoAction)
}

model payment {
  payment_uuid    String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  account_uuid    String           @db.Uuid
  status          payment_status   @default(pending)
  method          payment_method
  contract_id     BigInt?
  tx_hash         Bytes?
  currency        payment_currency
  amount          Decimal          @db.Decimal
  purchase_type   purchase_type
  purchase_amount BigInt
  purchase_data   Json             @default("{}")
  created_at      DateTime         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime         @default(now()) @db.Timestamptz(6)
  completed_at    DateTime?        @db.Timestamptz(6)
  error           String?
  account         account          @relation(fields: [account_uuid], references: [account_uuid], onDelete: NoAction, onUpdate: NoAction)
  contract        contract?        @relation(fields: [contract_id], references: [contract_id], onDelete: NoAction, onUpdate: NoAction)
}

model token_ownership {
  token_ownership_id BigInt   @id @default(autoincrement())
  contract_id        BigInt
  token_id           BigInt
  owner              Bytes
  count              BigInt   @default(1)
  updated_at         DateTime @default(now()) @db.Timestamptz(6)
  contract           contract @relation(fields: [contract_id], references: [contract_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([contract_id, token_id, owner])
  @@index([contract_id, owner])
  @@index([contract_id, token_id])
  @@index([owner])
}

enum blockchain {
  eth_mainnet @map("eth-mainnet")
  eth_goerli  @map("eth-goerli")
  eth_sepolia @map("eth-sepolia")
}

enum character_class {
  founders
  creators
  warriors
  services
  explorers
  leftover
}

enum character_status {
  active
  retired
  demezzed
}

enum character_type {
  zero
  drifter
  cyberbroker
}

enum mission_status {
  issued
  expired
  accepted
  declined
  ongoing
  completed
  failed
  cancelled
}

enum payment_currency {
  usd
  eth
}

enum payment_method {
  crypto
}

enum payment_status {
  pending
  completed
  failed
}

enum purchase_type {
  credits
  drifter
  bundle
  item
  nft
}

enum transit_status {
  ongoing
  completed
  cancelled
}
